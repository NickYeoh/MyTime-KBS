@model MyTime.ViewModels.UserViewModel

@{
    ViewBag.Title = MyTime.Resource.PersonalProfile;
    Layout = "~/Views/Shared/_Layout.cshtml";
    //Layout = null;
}

<div id="divForm" class="d-flex justify-content-center">

    <div class="card shadow" style="width:496px;">
        <div class="card-header bg-transparent">
            <h6> @ViewBag.Title </h6>
        </div>
        <div class="card-body">

            @using (Ajax.BeginForm(null, null, new AjaxOptions
            {
                InsertionMode = InsertionMode.Replace,
                AllowCache = false,
                HttpMethod = "POST",
                OnSuccess = "onSuccessProcess",
                UpdateTargetId = "divForm",
                LoadingElementId = "divSpinner",

            },
            new { @id = "formUpadte" }
            ))
            {
                @Html.AntiForgeryToken()

                @*@Html.HiddenFor(model => model.UserModel.DepartmentID)
                @Html.HiddenFor(model => model.UserModel.UnitID)*@
                @Html.HiddenFor(model => model.UserModel.AccessRoleID)

                @Html.HiddenFor(model => model.UserModel.IsResigned)
                @Html.HiddenFor(model => model.UserModel.ResignedOn)

                @Html.HiddenFor(model => model.UserModel.IsAttendanceExcluded)

                <div class="form-horizontal">

                    @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@

                    @Html.HiddenFor(model => model.UserModel.USRID)


                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.UserName, htmlAttributes: new { @class = "control-label col-md-12 required" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.UserName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.UserModel.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.NRIC, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.NRIC, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.UserModel.NRIC, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.Gender, htmlAttributes: new { @class = "control-label col-md-2" })

                        <div class="col-md-10">
                            @Html.RadioButtonFor(model => model.UserModel.Gender, "Lelaki") @MyTime.Resource.Male
                            <span class="pl-2"></span>
                            @Html.RadioButtonFor(model => model.UserModel.Gender, "Perempuan") @MyTime.Resource.Female
                        </div>

                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.ContactNo, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.ContactNo, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.UserModel.ContactNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.Email, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.Email, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.UserModel.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    @*<div class="form-group row">
                            @Html.LabelFor(model => model.UserModel.DepartmentName, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.UserModel.DepartmentName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.UserModel.DepartmentName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.UserModel.UnitName, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.UserModel.UnitName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.UserModel.UnitName, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    <div class="form-group row">

                        @Html.LabelFor(model => model.UserModel.DepartmentName, htmlAttributes: new { @class = "control-label col-md-12 required" })

                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.UserModel.DepartmentID, Model.SelectListDepartment as List<SelectListItem>, MyTime.Resource.PleaseSelect, htmlAttributes: new { id = "ddlDepartment", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.UserModel.DepartmentID, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    <div class="form-group row">

                        @Html.LabelFor(model => model.UserModel.UnitName, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">

                            @Html.DropDownListFor(model => model.UserModel.UnitID, Model.SelectListUnit as List<SelectListItem>, MyTime.Resource.PleaseSelect, htmlAttributes: new { id = "ddlUnit", @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.UserModel.UnitID, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.Designation, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.Designation, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.UserModel.Designation, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.Grade, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.Grade, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.UserModel.Grade, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.UserModel.RoleID)

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.RoleName, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.RoleName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.UserModel.RoleName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.UserModel.ShiftID)

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.ShiftName, htmlAttributes: new { @class = "control-label col-md-12" })

                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.ShiftName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.UserModel.ShiftName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.UserModel.AccessRoleName, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserModel.AccessRoleName, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.UserModel.AccessRoleName, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group row">
                        <div class="col-md-12 text-right">
                            <input type="submit" value="@MyTime.Resource.Save" class="btn btn-primary" />

                            <input id="btnCancel" type="button" value="@MyTime.Resource.Cancel" class="btn btn-warning" />

                   
                        </div>
                    </div>

                </div>

            }

        </div>

    </div>

</div>

@if (Model.UserAccessControlModel.IsAllowedChangePassword.Equals(true))
{
    <input type=hidden id="pid" value="update" />
}
else
{
    <input type=hidden id="pid" value="create" />
}


<button type="button" id="btnToggleMessageModal" class="btn btn-primary" style="visibility:hidden;" data-toggle="modal" data-target="#messageModal">
</button>

<div class="modal fade" id="messageModal" role="dialog">

    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@MyTime.Resource.MessageInfo</h5>
                @*<button type="button" id="btnCloseMessageModal" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>*@
            </div>
            <div class="modal-body">
                <p><label id="lblMessage"></label></p>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnCloseMessageModal" class="btn btn-primary" data-dismiss="modal">@MyTime.Resource.Close</button>
            </div>
        </div>
    </div>

</div>




@section styles {
    <link rel="stylesheet" href="~/Content/themes/base/jquery-ui.min.css">
}

@section Scripts{

    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    @*@Scripts.Render("~/bundles/custom-js")*@

<script type="text/javascript">

        $(document).ready(function () {

            unloadSpinner();
            showDivBody();

            var btn = document.getElementById('btnToggleMessageModal');
            btn.innerText = '2';

          
                $('#btnCancel').on('click', function () {

                    if (document.getElementById('pid').value == 'update') {
                        history.go(-1);
                    }
                    else {
                           window.location.href = '@Url.Action("Index","Auth")';
                    }

                     return false;
                 });

              


                  $('#btnCloseMessageModal').on('click', function () {
                        var url = '@Url.Action("Index","home")';
                      window.location.href = url;
                      return false;
                  });


                  $("#ddlDepartment").change(function () {

                            var id = $("#ddlDepartment").val();
                            $.ajax({
                                cache: false,
                                type: "GET",
                                url: '@Url.Action("FilterUnit", "User")',
                                data: { "departmentID": id },
                                success: function (json, textStatus) {

                                    $("#ddlUnit").empty();

                                    json = json || {};

                                    $("#ddlUnit").append('<option value="0">@MyTime.Resource.PleaseSelect</option>');

                                    for (var i = 0; i < json.length; i++) {
                                        $("#ddlUnit").append('<option value="' + json[i].UnitID + '">' + json[i].UnitName + '</option>');
                                    }

                                    //$("#ddlUnit").prop("disabled", false);
                                },
                                error: function () {
                                    alert("Data Not Found");
                                }
                            });
                        });


        });


        function onSuccessProcess(result, status, xhr) {

            if (result.status == 1) {

                unloadSpinner();

                var btn = document.getElementById('btnToggleMessageModal');
                var lbl = document.getElementById('lblMessage');

                switch (btn.textContent.trim()) {
                    case '1':
                        lbl.innerText = '@MyTime.Resource.MessageSuccessCreate';
                        break;
                    case '2':
                        lbl.innerText = '@MyTime.Resource.MessageSuccessUpdate';
                        break;
                    default:
                        lbl.innerText = '@MyTime.Resource.MessageSuccessCreate';
                        break;
                };

                $('#btnToggleMessageModal').click();

                @*var url = '@Url.Action("Index","home")';
                window.location.href = url;*@

            }

        };

</script>
}



